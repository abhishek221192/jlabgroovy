#summary We provide some examples of working with GroovySci in jLab.

= Introduction =

`In this page we provide small examples of using GroovySci, the default jLab mode, in scientific applications. The code can be executed either:`

  *  `by pasting it at the jLab's command console (it must be in GroovySci mode, not in jScript, F2 switches these modes)`
  *  `by pasting the code within the jLab's programmer's editor, select the code and pressing F6`
 


== Henon Chaotic Map ==

`This small GroovySci script computes some iterations of the Henon chaotic map and plots them. `

{{{
x = 0d; y = 0d;
niters = 10000; 

alpha = 1.4d;
beta = 0.3d;
tic();
xy=new double[2][niters];
for (k=1; k<niters; k++)  {
  xp = x;yp=y;
  x = 1+yp-alpha *xp*xp;
  y = beta*xp;
  xy[0][k] = x;
  xy[1][k] = y;
};

scatterPlotsOn()    // plot points without connecting with lines
plot(xy);

}}}


== Baker map ==

{{{




x = (double)0.1; y = (double)0.22;
niters = getInt("How many iterations of the Ikeda map");
xall = new double[niters]
yall = new double[niters]

y13 = (double)1.0/(double)3.0
y23 = (double)2.0/(double)3.0
tic() 
for (k in 1..niters-1)  {
  xp = x; yp=y
 if (y<=0.5) {
   y = 2*yp
   x = y13*xp
}
else {
  x = y13*xp+y23
  y = 2*yp - 1
  }

  xall[k] = x
  yall[k] = y
}

tm = toc()
scatterPlotsOn()
figure(1)
plot(xall, yall, "time = "+tm)

}}}