#summary Performing FFTs using code adapted from Numerical Recipes book.

= Introduction =

`The Numerical Recipes is a classic book, an excellent reference for any researcher and engineer in the field of numerical computation. GroovyLab present a Matlab-like interface to many routines from Numerical Recipes. Numerical Recipe routines are efficient and perhaps even more important they have extensive description in the book. We present some example code based on NR.


= One-Dimensional FFT example =

{{{


import groovySci.NR.NRFFT
import static groovySci.NR.NRFFT.*


import groovySci.NR.NRFFT
import static groovySci.NR.NRFFT.*

  NN=32; NN2=NN+NN
  data = new double[NN2]
  dcmp = new double[NN2]

     println "TEST 1"
	println "h(t) = real-valued even function"
	println "h(n) = h(N-n) and real"
	  // construct the function
	for (int i=0;i<NN2-1;i+=2) {
          data[i]=1.0/((( (i-NN)*(i-NN) )/NN)+1.0)
          data[i+1]=0.0
        }

      	cpdata = data.copy()  // copy data since FFT is done in-place

        	isign=1
        	groovySci.NR.NRFFT.four1(cpdata, isign);
        	figure(1); subplot(2,1,1);     plot(data, Color.BLUE,  "Real-Valued even function");
        	subplot(2,1,2); plot(cpdata, Color.RED, "H(n) = H(N-n) and Real")

// print the smallest FFT coefficients up to 5
     groovySci.NR.NRFFT.printft(cpdata, 5)


	println "TEST 2"
	println "h(t) = imaginary-valued even-function"
	println "h(n) = h(N-n) and imaginary"
	for (int i=0; i<NN2-1; i+=2) {
		data[i+1]=1.0/((( (i-NN)*(i-NN) )/NN)+1.0)
          data[i]=0.0;
	}

	 	cpdata = data.copy()  // copy data since FFT is done in-place
	 	

        	isign=1
        	groovySci.NR.NRFFT.four1(cpdata, isign);
        	figure(2); subplot(2,1,1);     plot(data, Color.BLUE,  "Imaginary-Valued even function");
        	subplot(2,1,2); plot(cpdata, Color.RED, "H(n) = H(N-n) ad Imaginary")


	println "TEST 3"
	println "h(t) = real-valued odd-function"
	println "h(n) = -h(N-n) and imaginary"
	for (int i=0; i<NN2-1; i+=2) {
		data[i]= (( (i-NN)/NN ))  /  ( (  (i-NN)/NN) *( (i-NN)/NN)  +1.0)
          data[i+1]=0.0;
	}

	// testing simplified interface to four1
 
 realparts = new double[NN]
 imparts  = new double[NN]

 groovySci.NR.NRFFT.four1S(data, realparts, imparts)
 
	


}}}

        
