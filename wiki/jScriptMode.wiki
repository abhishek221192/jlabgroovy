#summary jScript Mode of jLab: Matlab-like scripts executed with a Java interpreter.

= Introduction =

`The main default mode of jLab is the ` *`GroovySci`* `mode based on the Groovy language. However, jLab supports and an interpreted mode that interprets a subset of Matlab, the ` *`jScript`* `mode.`

`The jScript mode of jLab is switched with the ` *`F2`* ` key. Although, is not as powerful as the GroovySci mode, it provides an easy Matlab-like syntax.`

`We present some examples of jScripts. In order to execute, assure that jLab is in jScript mode, by pressing F2.`


== Double Scroll Attractor ==
{{{
fName  = "jExec.Functions.Chaotic.DoubleScrollDiffSys";
 n= 3;
 xStart = 0.0;
 xEnd =  getNumberDialog("Enter up integration value");
x0(1) = rand(1); 
x0(2) = rand(1); 
x0(3) = rand(1);

 contFlag = "true"; tic;
 tol = 0.4e-15;  aeta = tol;  reta = tol; 
h0=0.000001;  tic; 

yOut = jdiffsys(xStart, xEnd, n, x0, fName, aeta, reta,  h0); 

 timeCompute = toc; 
 plotTitle = "Double Scroll attractor with Java code, time "+timeCompute+ " end point = "+xEnd; 
 t = yOut(1,:);  x = yOut(2,:);
y = yOut(3,:); z = yOut(4,:);
  figure(1); plot3(x,y,z);  hold("on"); xlabel('x'); ylabel('y'); zlabel('z');
  title(plotTitle);

fig3d(1); plot3d_line(x,y,z, "Double Scroll  attractor");
}}}


== Lorenz system integrated with diffsys NUMAL routine ==
{{{
fName  = "jExec.Functions.Chaotic.LorenzDiffSys";
 n= 3;
 xStart = 0.0;
 xEnd =  getNumberDialog("Enter up integration value");
x0(1) = rand(1); 
x0(2) = rand(1); 
x0(3) = rand(1);

 contFlag = "true"; tic;
 tol = 0.4e-15;  aeta = tol;  reta = tol; 
h0=0.000001;  tic; 

yOut = jdiffsys(xStart, xEnd, n, x0, fName, aeta, reta,  h0); 

 timeCompute = toc; 
 plotTitle = "Lorenz attractor with Java code, time "+timeCompute+ " end point = "+xEnd; 
 t = yOut(1,:);  x = yOut(2,:);
y = yOut(3,:); z = yOut(4,:);
  figure(1); plot3(x,y,z);  hold("on"); xlabel('x'); ylabel('y'); zlabel('z');
  title(plotTitle);

 fig3d(1);  plot3d_line(x,y,z, "Lorenz  attractor");

}}}


== Lorenz system integrated with multistep NUMAL method ==
{{{

fName  = "jExec.Functions.Chaotic.LorenzMultiStep";
 n= 3;
 xStart = 0.0;
 xEnd =  getNumberDialog("Enter up integration value");

x0(1) = 0.12;
x0(2) = 0.1; 
x0(3) = 0.8;

     hmin = 1e-8;  // the minimum steplength 
     eps = 1.0e-9;  // the relative local error bound 
     hmax = 0.1;  // the maximum steplength 
     ymax(1) = 0.0001;  ymax(2) = 1.0;  ymax(3)=1.0; // the absolute local error bound divided by eps  
     first = "true";
     stiff = "false";
     tic; 
     yOut = jmultistep(xStart, xEnd, x0, hmin, hmax, ymax, eps, first, fName, stiff, n); 
    timeCompute = toc; 
   
  x1 = yOut(2,:);  x2 = yOut(3,:);  x3 = yOut(4,:);  plot3(x1,x2,x3);

 fig3d(1); plot3d_line(x,y,z, "Lorenz attractor evaluated with a multistep method ");

}}}

== Lorenz system integrated with Runge-Kutta NUMAL method ==
{{{
 fName  = "jExec.Functions.Chaotic.Lorenz";
 n= 3;
 xStart = 0.0;
 xEnd =  24.0;
x0(1) = 0.04840037112900297; 
x0(2) = 0.13548442252861992; 
x0(3) = 0.8792018004421086; 

 contFlag = "true"; tic;
 evalRKe = jrke(xStart, xEnd, n, x0, fName, contFlag);
timeCompute = toc; 
 plotTitle = "Lorenz attractor with Java code, time "+timeCompute+ " end point = "+xEnd; 
 t = evalRKe(1,:); x = evalRKe(2,:);
y = evalRKe(3,:);z = evalRKe(4,:);
  figure(1); plot3(x,y,z);  hold("on"); xlabel('x'); ylabel('y'); zlabel('z');

fig3d(1);  plot3d_line(x,y,z, "Lorenz  attractor");

}}}

== Lorenz system integrated with Runge-Kutta NUMAL method specifying  end integration value and starting in a random state ==
{{{
fName  = "jExec.Functions.Chaotic.LorenzRKE";
 n= 3;
 xStart = 0.0;
 xEnd =  getNumberDialog("Enter up integration value");
x0(1) = rand(1); 
x0(2) = rand(1); 
x0(3) = rand(1);

 contFlag = "true"; tic;
 evalRKe = jrke(xStart, xEnd, n, x0, fName, contFlag);
timeCompute = toc; 
 plotTitle = "Lorenz attractor with Java code, time "+timeCompute+ " end point = "+xEnd; 
 t = evalRKe(1,:); x = evalRKe(2,:);
y = evalRKe(3,:);z = evalRKe(4,:);
  figure(1); plot3(x,y,z);  hold("on"); xlabel('x'); ylabel('y'); zlabel('z'); title(plotTitle);


fig3d(1); plot3d_line(x,y,z, "Lorenz   attractor - RKE method");

}}}

== N-Scroll attractor integrated with diffsys NUMAL method ==
{{{
clear("all"); close("all");
fName  = "jExec.Functions.Chaotic.NScrollDiffSys";
 n= 3;
 xStart = 0.0;
 xEnd =  getNumberDialog("Enter up integration value");
x0(1) = rand(1); 
x0(2) = rand(1); 
x0(3) = rand(1);

 contFlag = "true"; tic;
 tol = 0.4e-15;  aeta = tol;  reta = tol; 
h0=0.000001;  tic; 

yOut = jdiffsys(xStart, xEnd, n, x0, fName, aeta, reta,  h0); 

 timeCompute = toc; 
 plotTitle = "Double Scroll attractor with Java code, time "+timeCompute+ " end point = "+xEnd; 
 t = yOut(1,:);  x = yOut(2,:);
y = yOut(3,:); z = yOut(4,:);
  figure(1); plot3(x,y,z);  hold("on"); xlabel('x'); ylabel('y'); zlabel('z');
  title(plotTitle);

fig3d(1); plot3d_line(x,y,z, "NScroll  attractor");

}}}


==  Ikeda Chaotic Map ==

{{{

% the Ikeda map
c1 = 0.4;
c2 = 0.9;
c3 = 9.0;
rho = 0.85;

x = 0.5; y = 0.5;
niters = getNumberDialog("How many iterations of the Ikeda map, e.g. 2000 ");


tic; 
for (k=1; k<niters; k++)  {
  xp = x;yp=y;
  taut = c1-c3/(1.0+xp*xp+yp*yp);
  x = rho + c2*xp*cos(taut)-yp*sin(taut);
  y = c2*(xp*sin(taut)+yp*cos(taut));
  xall(k) = x;
  yall(k) = y;
};
timeWithoutAlloc = toc;
disp("timeWithoutAlloc = "+timeWithoutAlloc);

figure(1); 
plot2d_scatter(xall, yall);

}}}


== A simple scatter plot ==

{{{
clear all;
t = 0:0.01:100;
x1 = sin(0.23*t)+cos(6.7*t);
fig(1);
plot2d_scatter(t,x1);
}}}

== A simple Gaussian density plot ==

{{{
             t=0:0.01:20;
             x = sin(0.42*t);
             values(1,:) = t;
             values(2,:) = x;
             values = values';
             quantile = [-14, -2, -0.5, 0, 0.5, 2, 14];
             plot2d_gaussianDensity(values, quantile, "density plot");
         
}}}


== A simple cloud plot ==
{{{
t=0:0.01:10; 
xall(1,:) = sin(0.2*t);
xall(2,:) = sin(0.6*t);
xall(3,:) = sin(0.3334*t);
[N M] =size(xall);
xall = xall+rand(N, M);

fig3d(1); cloudPlot2D(xall, "test bar plot");

}}}



== A simple 3-D Bar plot ==
{{{

             t=0:0.01:20;
             x = sin(0.42*t);
             N = length(x);
             y = rand(1,N);
             values(1,:) = t;
             values(2,:) = x;
             values(3,:) = y;
             values = values';
             plot3d_bar(values, "bar plot");
}}}