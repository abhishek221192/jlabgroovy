#summary Tracks some useful GroovyLab updates

= Code Completion (May 12) =

`Code completion for an identifier can be used with ` *`F4`*

`We can select an item from the completion list using ` *` ENTER `* ` and we can clear the completion's list window using ` *`ESC`*

`For example for the code:`
{{{
randMat = rand(3,4)
}}}

`If we press ` *`F4`* `while we are within ` *`randMat`* `we get a completion list for the ` *`Matrix`* ` objects.`

`If we type:  ` _`randMat.ei`_ `and then type ` *`F4`* ` we get a completion list of all the member variables starting with ` _`ei`_

`If we press ` *`Shift-F4`* ` we get class completion help, for example we can examine the contents of the class` _`javax.swing.JFrame`_ `by typing ` _`Shift-F4`_

`Also code completion, displays ` _`static`_  `members in ` *`boldface`* `and the` _`instance`_ `members in plain text. `



`The autocompletion feature can be very useful, for example, suppose that we want to use the ` _`NormalDistribution`_ ` class of the Apache Common Maths library as follows: `
{{{

 x = new org.apache.commons.math3.distribution.NormalDistribution()
}}}

`Now we can easily reveal the contents of that class by pressing ` *`F4`* ` above x`, ` or by typing a substring, as method name, e.g. x.sa`




= Abbreviations (May 04) =

`GroovyLab rsyntaxtextarea based editor, support abbreviations. This can be a useful feature. When you like to use an abbreviation, type the text of the abbreviation and then ` *`F11`*`. Then the short abbreviated text is replaced with the full one.`

`For example, if we type ` *`pu`*` and then F11 we have the replacement ` *`public`*

`File ` *`Abbreviations.txt`* `defines a comma separated list of abbreviations. This file can be edited from the user to define the preferred abbreviations. `