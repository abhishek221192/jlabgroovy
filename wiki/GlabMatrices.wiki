#summary Tutorial on the Matrix class of Glab

= Introduction =

`This tutorial describes by means of examples the Matrix class of Glab. `


= Tutorial on Matrix class =

`The Matrix class implements zero-indexed two-dimensional dense matrices in GroovySci. That matrices are mostly based on the JAMA library.`


== Constructors ==

`Matrix(rows: Integer, cols: Integer) // Creates a Matrix of size rows, cols initialized to zeros`

{{{
m=new Matrix(2, 3)
}}}




`Construct a Matrix by copying the array values, Matrix(double [][] da ), Creates a Matrix initialized with the da array`
{{{
dd = new double[2][4]

dd[1][1]=11

mdd = new Matrix(dd)

}}}



`Construction with filling an initial value, Matrix(int N, int M, double value), e.g. `

{{{
m = new Matrix(6,8, 6.8)
}}}


`Accessing matrix elements `

{{{
md = [ [4.5, 5.6, -4], [ 4.5, 3, -3.4],  [14.5, 2.2, -2.4], [ 40.5, 2.2, -3.4]] as double[][]
m = new Matrix(md)
x1 = m[0, 1]  // first row, second column
a = rand(30, 40)   // a 30 rows by 40 cols random matrix
x2 = a[1, 2, 4, 2, 2, 10]  // like matlab's a(1:2:4, 2:2:10)
x3 = a[1, 2, 4, true]  // like matlab's a(1:2:4, :)
 x4 = a[ true, 2, 2, 10]  // column select, all rows, as matlab's a(:, 2:2:10)
}}}

`Updating matrix elements `

{{{
a=rand(4,7)  // create a random matrix
a[2,3]= 23.0  // sets the corresponding element
println("element a[2, 3] is now "+a[2,3])
}}}


== Operators ==

`The following operators are available:  Matrix + Matrix, Matrix + Number, 	Matrix - Matrix, Matrix - Number, Matrix * Matrix, Matrix * Number, 		Matrix / Matrix, Matrix / Number, Number + Matrix, Number * Matrix`

{{{
a = rand(5, 8)
aa = a+a
a5 = a+5
ap5 = 5+a
a6 = a*6.8
a6m = 6.8*a
a85 = rand(8, 5)
ama = a*a85
}}}

== Static operations == 

`The following static operations are available: `

{{{
oo = ones(4, 10)   // a matrix with all ones

oo4 = sum(oo)   // perform sum of the columns
sum(sum(oo))   // total sum of the matrix elements

oo2 = fill(4, 10, 2.0)  // a matrix filled with 2 values
prod(oo2)  // perform product of the columns
prod(prod(oo2))  // product of all the matrix elements

csoo = cumsum(oo)  // perform a cummulative sum across columns
cpoo2 = cumprod(oo2)   // perform a cummulative product across columns

aa = rand(5,5)
aai = inv(aa)  // compute the matrix inverse

A = rand(5,5)
b = rand(5,1)
X = solve(A, b) //returns X Matrix verifying A*X = b. 
rank(A)  // the rank of A
trace(A)  // the trace of A
det(A)  // the determinant of A
cond(A)  // the condition number of A
norm1(A)  // norm 1 of A
norm2(A)  // norm 2 of A
normF(A)  // Frobenius norm of A
normInf(A)  // norm inf of A
dot(A, A)  // the dot product of A by itself

}}}

= Selecting the specified rows and columns of a matrix =

`Extracting sets of rows and columns from a matrix is many times a convenient operation. `

`We can extract the columns specified with true values with an array`  _`colIndices`_`.The new matrix is formed by using all the rows of the original matrix but with using only the specified columns. Example: `
{{{
  testMat = M(" 1.0 2.0 3.0 4.0; 5.0 6.0 7.0 8.0; 9 10 11 12")
  colIndices = [true, false, true, false] as boolean []
  extract0_2cols = testMat.getAt(":", colIndices)
}}}

`We can extract the rows specified with true values with an array ` _`rowIndices`_`. The new matrix is formed by using all the columns of the original matrix but with using only the specified rows. Example: `

{{{
 testMat = M(" 1.0 2.0 3.0 4.0; 5.0 6.0 7.0 8.0; 9 10 11 12")
 rowIndices = [true, false, true] as boolean []
 extract0_2rows = testMat.getAt( rowIndices, ":")
}}}



`We can extract the rows specified  with  an  array ` _`rowIndices`_`. The new matrix is formed by using all the columns of the original matrix but with using only the specified rows. The rows at the new matrix are arranged in the order specified with the array `_`rowIndices`_`. Example: `

{{{
 testMat = M(" 1.0 2.0 3.0 4.0; 5.0 6.0 7.0 8.0; 9 10 11 12; 13 14 15 16; 17 18 19 20")
 rowIndices = [3, 1] as int []
 extract3_1rows = testMat.getAt(rowIndices, ":")
}}}

`We can extract the columns specified with true values with an array ` _`colIndices`_ `.The new matrix is formed by using all the rows of the original matrix but with using only the specified columns.`
 {{{
 testMat = M(" 1.0 2.0 3.0 4.0; 5.0 6.0 7.0 8.0; 9 10 11 12")
 colIndices = [true, false, true, false] as boolean[]
 extract0_2cols = testMat.getAt(":", colIndices)
 }}}

== Filtering rows and columns of a matrix ==

`We can filter all the rows/columns of the matrix according to a predicate. The predicate is a function from the Int index of row/column to a boolean value. The relevant routines are as follows: `
{{{

  Matrix  filterRows(Closure predicate)
  Matrix  filterColumns(Closure predicate)

}}}

`For example, to return all the even numbered rows and columns of a matrix:` 
    {{{
      x = rand(10, 13)
      isEven = {  int n ->  if (n % 2 == 0) true else false  }  // define the predicate
      xevenRows = x.filterRows(isEven)
      xevenCols = x.filterColumns(isEven)
   
  }}}

   == Displaying the contents of a matrix ==

`By default a matrix is displayed using the  results returned by ` _`toString()`_ `, that however truncate large matrices, since there is a severe performance problem if we compute and display the resulting huge strings.`

`We can however display the whole contents using the ` _`print()`_ `method.`

`Also, we can browse the matrix contents with the possibility of altering them, using a convenient JTable based presentation, with the ` _`browse()`_ `method. For example: `

{{{
x = rand(30, 25)
x.print() // display the contents
x.browse()  // browse them using a JTable, editing cells affects the contents of the matrix

}}}


`We can also pass a variable name to the browse command, to help the user especially when many matrix contents windows are open: `

{{{
myMatrix  = rand(10, 15)
x.browse("myMatrix")  // browse them using a JTable, editing cells affects the contents of the matrix

}}}

== `Linear Algebra operations from JAMA`  ==

`to be continued `