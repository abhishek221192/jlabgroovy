#summary Transforming GroovyLab scripts to standalone applications

= `Transform GroovySci scripts to standalone applications` =

`One of the important advantages of GroovyLab is that the scripts can be converted easily to standalone applications, i.e. applications that run on the plain Java platform, without requiring the GroovyLab environment. We illustrate the way to achieve that by means of an example.`

`Suppose that we have the following GroovySci script:`

{{{
 def  t = inc(0, 0.01, 10)
 def  x = sin(0.23*t)+9.8*cos(1.12*t)
 plot(t,x)
}}}

`We want to run that as a standalone application.`

`The first step is to choose from the` *`Application`* `menu the ` *`StandAloneApplication`* ` option that transforms the Script to standalone application. GroovyLab asks for the name of the class that will wrap the script code, suppose that we use e.g. ` _`plots`_ `A class ` _`plots`_ ` is created automatically that wraps our script code in its main method and has the necessary include statements.`  

We are asked for a name for our standalone application object, suppose that we write plotSines ScalaLab automatically creates the Scala object that will execute the script in its main method.

The second step is to compile and execute our script, creating the corresponding Scala classes on disk and also a shell script file named with an extension .sh on Unix like systems and .bat on Windows. That file can be used to execute the application directly from the operating system without ScalaLab.

In our particular case the script file for Unix-like systems will be named plotSines.sh Then we can run our application with:

sh plotSines.sh