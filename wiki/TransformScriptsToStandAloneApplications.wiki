#summary Transforming GroovyLab scripts to standalone applications

= `Transform GroovySci scripts to standalone applications` =

`One of the important advantages of GroovyLab is that the scripts can be converted easily to standalone applications, i.e. applications that run on the plain Java platform, without requiring the GroovyLab environment. We illustrate the way to achieve that by means of an example.`

`Suppose that we have the following GroovySci script:`

{{{
 def  t = inc(0, 0.01, 10)
 def  x = sin(0.23*t)+9.8*cos(1.12*t)
 plot(t,x)
}}}

`We want to run that as a standalone application.`

`The first step is to choose from the` *`Application`* `menu the ` *`StandAloneApplication`* ` option that transforms the Script to standalone application. GroovyLab asks for the name of the class that will wrap the script code, suppose that we use e.g. ` _`plots.`_ `Also a shell script file named with an extension .sh on Unix like systems and .bat on Windows, is created automatically. That file can be used to execute the application directly from the operating system without GroovyLab.` 

`The second step is to compile the automatically generated Groovy code that wraps our GroovySci script. For that step, we should save the code, e.g. in a file, e.g. ` _`plots.groovy`_ `and then compile the plots.groovy. We can use the GroovyLab's explorer to compile easily that file. `

`The third (and final) step is to copy the` _`plots.sh`_ `script, and the` _`plots.class`_ `compiled class, to a directory that has the lib subdirectory with all the GroovyLab's libraries. Then we can run our standalone application using the script file, e.g. `
{{{ 
sh plots.sh
}}}