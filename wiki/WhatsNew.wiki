#summary Tracks some useful GroovyLab updates

=`July 04 updates` =

`More convenient syntax for generating vectors`
{{{
t = (0.0..100.0).step(0.1)  // like MATLAB's 0.0:0.1:100.0
plot(sin(0.45*t))
}}}



`Convenient assignment works for matrices, e.g. `
{{{

x = rand(80, 100)
x[2..3, 0..1] = 6.5353  // a rectangular subrange
x
x[4..5] = -0.45454  // assign rows 4 to 5 all columns


// assignment using ranges
x = rand(90, 90)
x[(0..20).by(2), 0..1] = 99

// assignment using ranges
x = rand(90,90)
x[0..1, (0..30).by(3)] = 33.3


// assignment using ranges
x = rand(90,90)
x[(2..14).by(5), (0..30).by(3)] = -77.3



row=2; col = 3
y = x[row..row+2, col..col+5]  // get a matrix range

yy = x[(row..row+50).by(2), (col..col+30).by(3)] // like MATLAB's x(row:2:row+50, col:3:col+30)

}}}


= `June 30 updates` =
` Imports are issued to the GroovyShell with an ` _`ImportCustomizer`_ `This results in faster response to script execution.`

_`Package Completion`_ ` is supported in `_ `Global Completion Mode`_ 

= `Two useful code completion modes for RSyntaxArea editor (June 23)`=

`The ` *`RSyntaxArea`* ` editor supports code completion (using ` *`CONTROL-SPACE`*` ) in two modes, that are switchable with a menu option of the ` _`Completion`_ `menu. These modes are: `

 # *`Global completion mode. `* ` This mode is useful to remind the global GroovyLab methods, e.g. the many overloaded versions of ` _`plot().`_ `The global completion list can be extended, using library routines, that are detected using Java reflection. These libraries are available at the ` _`Completion`_ `menu. `
 # *`Groovy completion mode. `* ` This mode works by exploiting the information acquired from  ` _`Java Reflection. `_ ` It is very useful to perform `  _`field and method`_ `completions.`

 
= Adaptive Functional Plotting (May 23) = 

`Generally, we can improve the plot of a function significantly by adjusting the sampling density according to the rate of function change. The ` _`faplot() ` `method is a first attempt towards adaptive functional plotting. We illustrate it by means of an example: `

{{{
f = {x ->  sin(x*x) }

closeAll()
Npoints = 200
figure(1)
linePlotsOn()
subplot(2, 1, 1)
fplot(f, 0, 10 )
xlabel("Fixed sampling functional ploting")
subplot(2, 1, 2)
res  = faplot(f, 0, 10,  Npoints)
xlabel("Adaptive sampling functional ploting")

figure(2)
linePlotsOn(); title("Functional plotting with adaptive sampling")
plot(res)

}}}

= `Customization of the pop-up menus of GroovyLab editor (May 15)` =

`In order GroovyLab to be even more convenient and user friendly, we started to customize the popup menu of the rsyntaxarea based editor. `

`Started from May 15 version, we have a ` _`plot`_ `popup menu option, that directly plots the signal under the caret position.  `

= Code Completion (May 13) =

`Code completion for an identifier can be used with ` *`F4`*

`We can select an item from the completion list using ` *` ENTER `* ` and we can clear the completion's list window using ` *`ESC`*  `Instead of` *`ENTER, `* `we can ` *`double click`* `the required entry.`

`For example for the code:`
{{{
randMat = rand(3,4)
}}}

`If we press ` *`F4`* `while we are within ` *`randMat`* `we get a completion list for the ` *`Matrix`* ` objects.`

`If we type:  ` _`randMat.ei`_ `and then type ` *`F4`* ` we get a completion list of all the member variables starting with ` _`ei`_

`If we press ` *`Shift-F4`* ` we get class completion help, for example we can examine the contents of the class` _`javax.swing.JFrame`_ `by typing ` _`Shift-F4`_

`Also code completion, displays ` _`static`_  `members in ` *`boldface`* `and the` _`instance`_ `members in plain text. `



`The autocompletion feature can be very useful, for example, suppose that we want to use the ` _`NormalDistribution`_ ` class of the Apache Common Maths library as follows: `
{{{

 x = new org.apache.commons.math3.distribution.NormalDistribution()
}}}

`Now we can easily reveal the contents of that class by pressing ` *`F4`* ` above x`, ` or by typing a substring, as method name, e.g. x.sa`




= Abbreviations (May 04) =

`GroovyLab rsyntaxtextarea based editor, support abbreviations. This can be a useful feature. When you like to use an abbreviation, type the text of the abbreviation and then ` *`F11`*`. Then the short abbreviated text is replaced with the full one.`

`For example, if we type ` *`pu`*` and then F11 we have the replacement ` *`public`*

`File ` *`Abbreviations.txt`* `defines a comma separated list of abbreviations. This file can be edited from the user to define the preferred abbreviations. `